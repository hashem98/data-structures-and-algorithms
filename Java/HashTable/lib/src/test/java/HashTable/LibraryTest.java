/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
    @Test
    public void addTest(){
        HashTable<String, Integer> hashTable = new HashTable<String, Integer>();
        hashTable.add("Hashem",55);
        hashTable.add("Smadi",66);

        assertNotNull(hashTable.contains("Hashem"));
        assertTrue(hashTable.contains("Hashem"));
        assertEquals(55, hashTable.get("Hashem"));
        assertNull(hashTable.get("Ali"));
    }
    @Test
    public void setOfKeyTest(){
        HashTable hashTable =new HashTable<>();
        hashTable.add("h",1);
        hashTable.add("a",2);
        hashTable.add("s",3);
        assertEquals(3,hashTable.getSize());
    }

    @Test
    public void containTest(){
        System.out.println(Objects.hashCode("FB"));
        System.out.println(Objects.hashCode("Ea"));

        HashTable<String, Integer> hashTable = new HashTable<String, Integer>();
        hashTable.add("Hashem",55);
        hashTable.add("Smadi",66);
        hashTable.add("FB",10);
        hashTable.add("Ea",20);

        assertTrue(hashTable.contains("FB"));
        assertTrue(hashTable.contains("Ea"));

        assertEquals(10, hashTable.get("FB"));
        assertEquals(20, hashTable.get("Ea"));

    }
    //************************ repeated word ************************
    @Test
    public void repeatedWord(){
        HashTable<String, Integer> hashTable = new HashTable<String, Integer>();

        String sentence1 = "Once upon a time, there was a brave princess who...";
        String sentence2 = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only...";
        String sentence3 = "It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York...";

        String test1 = hashTable.hashmapRepeatedWord(sentence1);
        String test2 = hashTable.hashmapRepeatedWord(sentence2);
        String test3 = hashTable.hashmapRepeatedWord(sentence3);

        assertEquals("a", test1, "repeatedWord test should return 'a'");
        assertEquals("it", test2, "repeatedWord test should return 'it'");
        assertEquals("summer", test3, "repeatedWord test should return 'summer'");
    }
    //************************ left-join ************************
    @Test
    public void leftJoinTest(){
         HashTable app = new HashTable();
        HashTable<String, String> synonym = new HashTable<String, String>();
        HashTable<String, String> antonym = new HashTable<String, String>();


        synonym.add("fond", "enamored");
        synonym.add("wrath", "anger");
        synonym.add("diligent", "employed");
        synonym.add("outfit", "garb");
        synonym.add("guide", "usher");

        antonym.add("fond", "averse");
        antonym.add("wrath", "delight");
        antonym.add("diligent", "idle");
        antonym.add("guide", "follow");
        antonym.add("flow", "jam");

        List<List<String>> res = app.hashMapLeftJoin(synonym,antonym);

        List<String> test1 = new ArrayList<>();
        test1.add("fond");
        test1.add("enamored");
        test1.add("averse");

        assertEquals(3, res.get(0).size());
        assertEquals(5, res.size());
        assertTrue( res.contains(test1));
    }
}
